module aClock(
  input reset,
  input clk,
  // '0' and '1' in inputs or outputs 
  // repesent the one's place and ten's place
  input [1:0] h_in1, //ten's place of i/p hour
  input [3:0] h_in0, //one's place of i/p hour
  input [3:0] m_in1, //ten's place of i/p minute
  input [3:0] m_in0, //one's place of i/p minute
  input load_time,
  input load_alarm,
  input stop_alarm,
  input alarm_on,
  
  output reg Alarm,
  output [1:0] h_out1,//ten's place of o/p hour
  output [3:0] h_out0,//one's place of o/p hour
  output [3:0] m_out1,//ten's place of o/p minute
  output [3:0] m_out0,//one's place of o/p minute
  output [3:0] s_out1,//ten's place of o/p second
  output [3:0] s_out0//one's place of o/p seconds
);
  
  reg clk_1s;
  reg [3:0] temp_1s;
  reg [5:0] temp_hour, temp_minute, temp_second;
  reg [1:0] c_hour1, a_hour1;
  reg [3:0] c_hour0, a_hour0;
  reg [3:0] c_min1, a_min1;
  reg [3:0] c_min0, a_min0;
  reg [3:0] c_sec1, a_sec1;
  reg [3:0] c_sec0, a_sec0;

  function [3:0] mod_10;
    input [5:0] number;
    begin
      mod_10 = (number >= 50) ?
      5 : (number >= 40) ? 
      4 : (number >= 30) ? 
      3 : (number >= 20) ? 
      2 : (number >= 10) ? 
      1:0;
    end
  endfunction

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      a_hour1 <= 2'b 00;
      a_hour0 <= 4'b 0000;
      a_min1 <= 4'b 0000;
      a_min0 <= 4'b 0000;
      a_sec1 <= 4'b 0000;
      a_sec0 <= 4'b 0000;
      temp_hour <= h_in1 * 10 + h_in0;
      temp_minute <= m_in1 * 10 + m_in0;
      temp_second <= 0;
    end else begin
      if (load_alarm) begin
        a_hour1 <= h_in1;
        a_hour0 <= h_in0;
        a_min1 <= m_in1;
        a_min0 <= m_in0;
        a_sec1 <= 4'b0000;
        a_sec0 <= 4'b0000;
      end
      if (load_time) begin
        temp_hour <= h_in1 * 10 + h_in0;
        temp_minute <= m_in1 * 10 + m_in0;
        temp_second <= 0;
      end 
      else begin
        temp_second <= temp_second + 1;
        if (temp_second >= 59) begin
          temp_minute <= temp_minute + 1;
          temp_second <= 0;
          if (temp_minute >= 59) begin
            temp_minute <= 0;
            temp_hour <= temp_hour + 1;
            if (temp_hour >= 23) begin
              temp_hour <= 0;
            end
          end
        end
      end
    end
  end

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      temp_1s <= 0;
      clk_1s <= 0;
    end else begin
      temp_1s <= temp_1s + 1;
      if (temp_1s <= 5) clk_1s <= 0;
      else if (temp_1s >= 10) begin
        clk_1s <= 1;
        temp_1s <= 1;
      end else
        clk_1s <= 1;
    end
  end

  always @(*) begin
    if (temp_hour >= 20) begin
      c_hour1 = 2;
    end else if (temp_hour >= 10) begin
      c_hour1 = 1;
    end else begin
      c_hour1 = 0;
    end
    c_hour0 = temp_hour - c_hour1 * 10;
    c_min1 = mod_10(temp_minute);
    c_min0 = temp_minute - c_min1 * 10;
    c_sec1 = mod_10(temp_second);
    c_sec0 = temp_second - c_sec1 * 10;
  end

  	//checking for alarm
  always @(posedge clk_1s or posedge reset) begin
    if (reset) begin
      Alarm <= 0;
    end else begin
      if ({a_hour1, a_hour0, a_min1, a_min0} == {c_hour1, c_hour0, c_min1, c_min0}) 
        begin
          if (alarm_on) Alarm <= 1;
        end
      if (stop_alarm) Alarm <= 0;
    end
  end
//giving outputs value
  assign h_out1 = c_hour1;
  assign h_out0 = c_hour0;
  assign m_out1 = c_min1;
  assign m_out0 = c_min0;
  assign s_out1 = c_sec1;
  assign s_out0 = c_sec0;

endmodule
